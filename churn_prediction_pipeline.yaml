# PIPELINE DEFINITION
# Name: customer-churn-prediction-pipeline
# Description: A pipeline to perform customer churn prediction.
# Inputs:
#    url: str
components:
  comp-download-operation:
    executorLabel: exec-download-operation
    inputDefinitions:
      parameters:
        url:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        data_path:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-ingestion-operation:
    executorLabel: exec-ingestion-operation
    inputDefinitions:
      artifacts:
        input_csv:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        output_csv:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-processing-operation:
    executorLabel: exec-processing-operation
    inputDefinitions:
      artifacts:
        input_csv:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        processed_X:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        processed_y:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-training-operation:
    executorLabel: exec-training-operation
    inputDefinitions:
      artifacts:
        processed_X:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        processed_y:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        knn_model:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        lg_model:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        svm_model:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-download-operation:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_operation
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.3'\
          \ 'requests==2.32.3' 'minio==7.2.15' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_operation(url: str, data_path: OutputPath('Dataset'))\
          \ -> None:\n    import requests\n    import pandas as pd\n\n    if url !=\
          \ '':\n        # Pull object from MINIO\n        response = requests.get(url)\n\
          \        response.raise_for_status()\n        from io import StringIO\n\
          \        df = pd.read_csv(StringIO(response.text), header=0, sep=\";\")\n\
          \    else:        \n        from minio import Minio\n        # MinIO client\
          \ setup\n        minio_client = Minio(\n            endpoint=\"192.168.203.181:30900\"\
          , \n            access_key=\"minioadmin\", \n            secret_key=\"minioadmin\"\
          , \n            secure=False\n        )    \n        # Get the object and\
          \ save locally\n        minio_client.fget_object(\n            bucket_name=\"\
          datasets\", \n            object_name=\"customer_churn_dataset-testing-copy.csv\"\
          ,\n            file_path=\"/tmp/dataset.csv\"\n        )    \n        #\
          \ Use the downloaded CSV file for data ingestion\n        df = pd.read_csv(\"\
          /tmp/dataset.csv\")\n\n    if not df.empty:\n        print(\"Data Description\
          \ => \",df.describe())\n        df.to_csv(data_path, index=False)\n\n"
        image: python:3.11
    exec-ingestion-operation:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - ingestion_operation
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.3'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef ingestion_operation(input_csv: InputPath('Dataset'), output_csv:\
          \ OutputPath('Dataset')) -> None:\n        import pandas as pd\n       \
          \ # Simulate loading data from CSV file located at a known path\n      \
          \  # input_csv='customer_churn_dataset-testing-master.csv'\n        df =\
          \ pd.read_csv(input_csv)\n        df.describe()\n        df.to_csv(output_csv,\
          \ index=False)\n\n"
        image: python:3.11
    exec-processing-operation:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - processing_operation
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.3'\
          \ 'scikit-learn==1.6.1' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef processing_operation(input_csv: InputPath('Dataset'), processed_X:\
          \ OutputPath('Dataset'), processed_y: OutputPath('Dataset')) -> None:\n\
          \    import pandas as pd\n    from sklearn.preprocessing import StandardScaler\n\
          \    from sklearn.feature_selection import SelectKBest, f_classif\n    from\
          \ sklearn.model_selection import train_test_split\n\n    df = pd.read_csv(input_csv)\n\
          \    print(\"__________Data Information__________\")\n    print(df.info())\n\
          \    print(\"__________Contract Length__________\")\n    print(df[\"Contract\
          \ Length\"].value_counts())\n\n    # Feature selection and standardization\n\
          \    gender_map = {'Male': 0, 'Female': 1}\n    subscription_map = {'Basic':\
          \ 0, 'Premium': 1, 'Pro': 2}\n    Contract_Length = {'Annual': 0, 'Quarterly':\
          \ 1, 'Monthly' : 2} \n\n    df['Gender'] = df['Gender'].map(gender_map)\n\
          \    df['Subscription Type'] = df['Subscription Type'].map(subscription_map)\n\
          \    df['Contract Length'] = df['Contract Length'].map(Contract_Length)\n\
          \n    # Fill NaN values with the mode for each column\n    for column in\
          \ df.columns:\n        df[column].fillna(df[column].mode()[0], inplace=True)\n\
          \n    threshold = 0.03\n    correlation_matrix = df.corr()\n    high_corr_features\
          \ = correlation_matrix.index[abs(correlation_matrix[\"Churn\"]) > threshold].tolist()\n\
          \    high_corr_features.remove(\"Churn\")    \n    print(\"__________High\
          \ Correlated Features__________\")\n    print(high_corr_features)\n\n  \
          \  X_selected = df[high_corr_features]\n    y_selected = df[\"Churn\"]\n\
          \n    print(\"__________X-Data Information__________\")\n    print(pd.DataFrame(X_selected).info())\n\
          \    print(\"__________Y-Data Information__________\")\n    print(pd.Series(y_selected).info())\n\
          \n    # # Select features\n    # selector = SelectKBest(score_func=f_classif,\
          \ k=10)\n    # X_selected = selector.fit_transform(X, y)\n\n    # # Standardization\n\
          \    # scaler = StandardScaler()\n    # X_scaled = scaler.fit_transform(X_selected)\n\
          \n    # # Save the processed data to files\n    # pd.DataFrame(X_scaled).to_csv(processed_X,\
          \ index=False)\n    # pd.Series(y).to_csv(processed_y, index=False)\n\n\
          \    #Save the processed data to files    \n    pd.DataFrame(X_selected).to_csv(processed_X,\
          \ index=False)\n    pd.Series(y_selected).to_csv(processed_y, index=False)\n\
          \n"
        image: python:3.11
    exec-training-operation:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - training_operation
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.3'\
          \ 'scikit-learn==1.6.1' 'joblib==1.4.2' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef training_operation(processed_X: InputPath('Dataset'), processed_y:\
          \ InputPath('Dataset'), \n                      knn_model: OutputPath('Dataset'),\
          \ lg_model: OutputPath('Dataset'), svm_model: OutputPath('Dataset')) ->\
          \ None:\n    import pandas as pd\n    from sklearn.model_selection import\
          \ train_test_split\n    from sklearn.neighbors import KNeighborsClassifier\
          \    \n    from sklearn.linear_model import LogisticRegression\n    from\
          \ sklearn.svm import SVC\n    from sklearn.metrics import accuracy_score,\
          \ confusion_matrix, classification_report\n    import joblib\n\n    X_processed\
          \ = pd.read_csv(processed_X)\n    y_processed = pd.read_csv(processed_y)\n\
          \n    X_train, X_test, y_train, y_test = train_test_split(X_processed, y_processed,\
          \ test_size= 0.2 , shuffle=True, random_state=55)\n\n    print(\"__________X-Training\
          \ Data Information__________\")\n    print(pd.DataFrame(X_train).info())\n\
          \    print(\"__________Y-Training Data Information__________\")\n    print(pd.DataFrame(y_train).info())\n\
          \n    #KNN Model \n    knn = KNeighborsClassifier(n_neighbors=3)\n    knn.fit(X_train,\
          \ y_train)\n    y_pred_knn = knn.predict(X_test)\n    accuracy = accuracy_score(y_test,\
          \ y_pred_knn)\n    print(\"__________KNN Accuracy Score__________\")\n \
          \   print(f'Accuracy: {accuracy * 100:.2f}%')    \n    print(\"__________KNN\
          \ Classification Report__________\")\n    print(classification_report(y_test,\
          \ y_pred_knn))\n    # Save the trained model\n    joblib.dump(knn, knn_model)\n\
          \n    #Logistic Regression\n    lg = LogisticRegression(max_iter=1000, random_state=42)\n\
          \    lg.fit(X_train, y_train)\n    y_pred_lg = lg.predict(X_test)\n    print(\"\
          __________LR Accuracy Score__________\")\n    print(accuracy_score(y_test,\
          \ y_pred_lg))\n    # Save the trained model\n    joblib.dump(lg, lg_model)\n\
          \n    #SVM \n    svm = SVC()\n    svm.fit(X_train, y_train)\n    y_pred_svm\
          \ = svm.predict(X_test)\n    print(\"__________SVM Accuracy Score__________\"\
          )\n    print(accuracy_score(y_test, y_pred_svm))\n    # Save the trained\
          \ model\n    joblib.dump(svm, svm_model)\n\n"
        image: python:3.11
pipelineInfo:
  description: A pipeline to perform customer churn prediction.
  name: customer-churn-prediction-pipeline
root:
  dag:
    tasks:
      download-operation:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-download-operation
        inputs:
          parameters:
            url:
              componentInputParameter: url
        taskInfo:
          name: download-operation
      ingestion-operation:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-ingestion-operation
        dependentTasks:
        - download-operation
        inputs:
          artifacts:
            input_csv:
              taskOutputArtifact:
                outputArtifactKey: data_path
                producerTask: download-operation
        taskInfo:
          name: ingestion-operation
      processing-operation:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-processing-operation
        dependentTasks:
        - ingestion-operation
        inputs:
          artifacts:
            input_csv:
              taskOutputArtifact:
                outputArtifactKey: output_csv
                producerTask: ingestion-operation
        taskInfo:
          name: processing-operation
      training-operation:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-training-operation
        dependentTasks:
        - processing-operation
        inputs:
          artifacts:
            processed_X:
              taskOutputArtifact:
                outputArtifactKey: processed_X
                producerTask: processing-operation
            processed_y:
              taskOutputArtifact:
                outputArtifactKey: processed_y
                producerTask: processing-operation
        taskInfo:
          name: training-operation
  inputDefinitions:
    parameters:
      url:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
